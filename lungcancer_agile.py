# -*- coding: utf-8 -*-
"""LungCancer-Agile.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iM3nbgn9rBMucutJk8UAW4aC-TgtHH7i

### NAIVE BAYES
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/lungcancer.csv")
df.head()

from sklearn.preprocessing import LabelEncoder
df_labelencoding = df
label_encoder = LabelEncoder()
df_labelencoding['GENDER']=label_encoder.fit_transform(df_labelencoding['GENDER'])
df_labelencoding

x=df.drop('LUNG_CANCER',axis=1)
y=df['LUNG_CANCER']

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=42)

model = GaussianNB()
model.fit(x_train, y_train)

y_pred = model.predict(x_test)
print(y_pred)

result_nb = accuracy_score(y_test, y_pred)
print("Accuracy:", result_nb * 100, "%")

"""### DECISION TREE"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/lungcancer.csv")
df.head()

from sklearn.preprocessing import LabelEncoder
df_labelencoding = df
label_encoder = LabelEncoder()
df_labelencoding['GENDER']=label_encoder.fit_transform(df_labelencoding['GENDER'])
df_labelencoding

x=df.drop('LUNG_CANCER',axis=1)
y=df['LUNG_CANCER']

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)

model = DecisionTreeClassifier(random_state=42)
model.fit(x_train, y_train)

y_pred = model.predict(x_test)
print(y_pred)

result_dt = accuracy_score(y_test, y_pred)
print("Accuracy:", result_dt * 100, "%")

"""### SVM"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/lungcancer.csv")
df.head()

from sklearn.preprocessing import LabelEncoder
df_labelencoding = df
label_encoder = LabelEncoder()
df_labelencoding['GENDER']=label_encoder.fit_transform(df_labelencoding['GENDER'])
df_labelencoding

x=df.drop('LUNG_CANCER',axis=1)
y=df['LUNG_CANCER']

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)

model = SVC(kernel='linear')
model.fit(x_train, y_train)

y_pred = model.predict(x_test)
print(y_pred)

result_svm = accuracy_score(y_test, y_pred)
print("Accuracy:", result_svm * 100, "%")

"""### KNN"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/lungcancer.csv")
df.head()

from sklearn.preprocessing import LabelEncoder
df_labelencoding = df
label_encoder = LabelEncoder()
df_labelencoding['GENDER']=label_encoder.fit_transform(df_labelencoding['GENDER'])
df_labelencoding

x=df.drop('LUNG_CANCER',axis=1)
y=df['LUNG_CANCER']

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.19,random_state=42)

k=3
model = KNeighborsClassifier(n_neighbors=k)
model.fit(x_train, y_train)

y_pred = model.predict(x_test)
print(y_pred)

result_knn = accuracy_score(y_test, y_pred)
print("Accuracy:", result_knn * 100, "%")

"""### RANDOM FOREST"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/lungcancer.csv")
df.head()

from sklearn.preprocessing import LabelEncoder
df_labelencoding = df
label_encoder = LabelEncoder()
df_labelencoding['GENDER']=label_encoder.fit_transform(df_labelencoding['GENDER'])
df_labelencoding

x=df.drop('LUNG_CANCER',axis=1)
y=df['LUNG_CANCER']

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.19,random_state=42)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(x_train, y_train)

y_pred = model.predict(x_test)
print(y_pred)

result_rf = accuracy_score(y_test, y_pred)
print("Accuracy:", result_rf * 100, "%")

"""### LOGISTIC REGRESSION"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/lungcancer.csv")
df.head()

from sklearn.preprocessing import LabelEncoder
df_labelencoding = df
label_encoder = LabelEncoder()
df_labelencoding['GENDER']=label_encoder.fit_transform(df_labelencoding['GENDER'])
df_labelencoding

x=df.drop('LUNG_CANCER',axis=1)
y=df['LUNG_CANCER']

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)

model = LogisticRegression()
model.fit(x_train, y_train)

y_pred = model.predict(x_test)
print(y_pred)

result_lr = accuracy_score(y_test, y_pred)
print("Accuracy:", result_lr * 100, "%")

"""### GRAPH

Naive Bayes - 95.69 <br>
Decision Tree - 96.77 <br>
SVM - 96.77 <br>
KNN - 94.91 <br>
Random Forest - 96.61 <br>
Logistic Regression - 98.38
"""

import matplotlib.pyplot as plt

accuracy_nb = 95.69
accuracy_dt = 96.77
accuracy_knn = 96.77
accuracy_svm = 94.91
accuracy_rf = 96.61
accuracy_lr = 98.38

models = ['Na√Øve Bayes', 'Decision Tree', 'KNN', 'SVM', 'Random Forest', 'Logistic Regression']
accuracies = [accuracy_nb, accuracy_dt, accuracy_knn, accuracy_svm, accuracy_rf, accuracy_lr]

# Plotting the accuracies as a line plot
plt.figure(figsize=(10, 6))
plt.plot(models, accuracies, marker='o', color='b', linestyle='-', markersize=8)
plt.xlabel('Models')
plt.ylabel('Accuracy (%)')
plt.title('Model Accuracy Comparison')
plt.ylim(90, 100)  # Adjust y-axis range to include all values
plt.yticks(range(90, 102, 2))  # Set y-axis ticks at intervals of 2
plt.grid(True)

plt.show()